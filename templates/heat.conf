[DEFAULT]
# The default user for new instances (string value)
instance_user=ec2-user

# Driver to use for controlling instances (string value)
instance_driver=heat.engine.nova

# List of directories to search for Plugins (list value)
plugin_dirs=/usr/lib64/heat,/usr/lib/heat

# The directory to search for environment files (string value)
environment_dir=/etc/heat/environment.d

# Select deferred auth method, stored password or trusts
# (string value)
deferred_auth_method=password

# Subset of trustor roles to be delegated to heat (list value)
trusts_delegated_roles=heat_stack_owner

# Maximum resources allowed per top-level stack. (integer
# value)
max_resources_per_stack=1000

# Maximum number of stacks any one tenant may have active at
# one time. (integer value)
max_stacks_per_tenant=100

# Controls how many events will be pruned whenever a  stack's
# events exceed max_events_per_stack. Set this lower to keep
# more events at the expense of more frequent purges. (integer
# value)
event_purge_batch_size=10

# Maximum events that will be available per stack. Older
# events will be deleted when this is reached. Set to 0 for
# unlimited events per stack. (integer value)
max_events_per_stack=1000

# Name of the engine node. This can be an opaque identifier.It
# is not necessarily a hostname, FQDN, or IP address. (string
# value)
host=heat

# seconds between running periodic tasks (integer value)
periodic_interval=60

# URL of the Heat metadata server (string value)
heat_metadata_server_url=

# URL of the Heat waitcondition server (string value)
heat_waitcondition_server_url=

# URL of the Heat cloudwatch server (string value)
heat_watch_server_url=

# Instance connection to cfn/cw API via https (string value)
instance_connection_is_secure=0

# Instance connection to cfn/cw API validate certs if ssl
# (string value)
instance_connection_https_validate_certificates=1

# Keystone role for heat template-defined users (string value)
heat_stack_user_role=heat_stack_user

# Maximum raw byte size of any template. (integer value)
max_template_size=524288

# Maximum depth allowed when using nested stacks. (integer
# value)
max_nested_stack_depth=3


#
# Options defined in heat.common.crypt
#

# Encryption key used for authentication info in database
# (string value)
auth_encryption_key=notgood but just long enough i think


#
# Options defined in heat.common.wsgi
#

# Maximum raw byte size of JSON request body. Should be larger
# than max_template_size. (integer value)
max_json_body_size=1048576


#
# Options defined in heat.db.api
#

# The backend to use for db (string value)
db_backend=mysql


#
# Options defined in heat.engine.clients
#

# Fully qualified class name to use as a client backend.
# (string value)
cloud_backend=heat.engine.clients.OpenStackClients


{% if rabbitmq_host -%}
rabbit_host = {{ rabbitmq_host }}
rabbit_userid = {{ rabbitmq_user }}
rabbit_password = {{ rabbitmq_password }}
rabbit_virtual_host = {{ rabbitmq_virtual_host }}
rabbit_use_ssl = false
{% endif -%}

[database]

#
# Options defined in heat.openstack.common.db.api
#

# The backend to use for db (string value)
backend=mysql

# sql
{% if database_host -%}
connection = mysql://{{ database_user }}:{{ database_password }}@{{ database_host }}/{{ database }}
{% endif -%}

[paste_deploy]

# The API paste config file to use (string value)
api_paste_config=/etc/heat/api-paste.ini


[heat_api]

# The port on which the server will listen. (integer value)
bind_port=8004

[heat_api_cfn]

# The port on which the server will listen. (integer value)
bind_port=8000
